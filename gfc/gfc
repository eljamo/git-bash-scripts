#!/bin/bash

# Function to print error message and exit
error_exit() {
  echo "Error: $1" >&2
  exit 1
}

# Check if git is installed
if ! command -v git &> /dev/null; then
  error_exit "git is not installed."
fi

# Check if current directory is a git repository
if ! git rev-parse --is-inside-work-tree &> /dev/null; then
  error_exit "Not a git repository."
fi

# Fetch all branches and prune
if ! git fetch --all --prune &> /dev/null; then
  error_exit "Failed to fetch branches."
fi

# Get list of local branches
LOCAL_BRANCHES=$(git branch --format="%(refname:short)")

# Get list of remote branches, stripping 'origin/' prefix and ignoring any 'HEAD' entry
REMOTE_BRANCHES=$(git branch -r | awk '!/\/HEAD/ {sub(/^[^\/]*\//, ""); print}')

# Combine local and remote branches, removing duplicates
BRANCHES=$(echo -e "$LOCAL_BRANCHES\n$REMOTE_BRANCHES" | sort -u)

# Filter branches based on search terms
if [ -n "$1" ] || [ -n "$2" ]; then
  SEARCH_PATTERN=""
  [ -n "$1" ] && SEARCH_PATTERN+="$1"
  [ -n "$2" ] && SEARCH_PATTERN+="|$2"
  BRANCHES=$(echo "$BRANCHES" | grep -iE "$SEARCH_PATTERN")
fi

# Check if branches were found
if [ -z "$BRANCHES" ]; then
  error_exit "No branches found."
fi

echo "Please choose the branch you want to checkout:"

# Display branches in a select menu
select BRANCH in $BRANCHES; do
  if [ -n "$BRANCH" ]; then
    # Attempt to checkout the selected branch
    if ! git checkout "$BRANCH"; then
      error_exit "Failed to checkout branch '$BRANCH'."
    fi
    
    # Check if branch has a remote tracking branch
    TRACKING_BRANCH=$(git rev-parse --abbrev-ref --symbolic-full-name "$BRANCH@{u}" 2> /dev/null)
    if [ -n "$TRACKING_BRANCH" ]; then
      if ! git pull; then
        error_exit "Failed to pull latest changes for branch '$BRANCH'."
      fi
      echo "Successfully checked out and updated branch '$BRANCH'."
    else
      echo "Successfully checked out branch '$BRANCH', but no tracking branch to pull from."
    fi
    
    exit 0
  else
    echo "Invalid selection. Please try again."
  fi
done
